package com.geekstack.cards.service;

import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import jakarta.json.Json;
import jakarta.json.JsonObject;

@Service
public class EmailService {

    @Value("${reporting.email}")
    private String emailAddress;

    @Value("${resend.api.key}")
    private String resendApiKey;

    @Value("${resend.from.email}")
    private String resendFromEmail;

    private final RestTemplate restTemplate = new RestTemplate();

    @Async
    public void sendReportEmail(String payload) {
        try {
            JsonObject jobject = Json.createReader(new StringReader(payload)).readObject();
            String cardUid = jobject.getString("cardUid");
            String userId = jobject.getString("userId");
            String errorMsg = jobject.getString("errorMsg");
            String tcg = jobject.getString("tcg");

            String subject = buildTrelloEmailSubject(cardUid, tcg);
            String body = buildTrelloEmailBody(userId, cardUid, errorMsg);

            Map<String, Object> emailData = new HashMap<>();
            emailData.put("from", resendFromEmail);
            emailData.put("to", emailAddress);
            emailData.put("subject", subject);
            emailData.put("html", body);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(resendApiKey);

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(emailData, headers);

            ResponseEntity<String> response = restTemplate.postForEntity(
                "https://api.resend.com/emails", request, String.class);

            System.out.println("Resend API response: " + response.getStatusCode());
            System.out.println("Response body: " + response.getBody());
        } catch (Exception e) {
            System.err.println("Error sending email via Resend: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String buildTrelloEmailBody(String userId, String cardUid, String errorMsg) {
        return "<html>" +
                "<body>" +
                "<h2>ðŸ”´ Error Report</h2>" +
                "<hr/>" +
                "<p><strong>User ID:</strong> " + userId + "</p>" +
                "<p><strong>Card ID:</strong> " + cardUid + "</p>" +
                "<p><strong>Error Message:</strong></p>" +
                "<blockquote style='color:red;'>" + errorMsg + "</blockquote>" +
                "<p><strong>Timestamp:</strong> " + java.time.LocalDateTime.now() + "</p>" +
                "<hr/>" +
                "<p><em>This ticket was automatically generated by GeekStack System.</em></p>" +
                "</body>" +
                "</html>";
    }

    private String buildTrelloEmailSubject(String cardUid, String tcg) {
        return "Error Ticket - " + cardUid + " #" + tcg;
    }
}